<?php
 
/*
 
Plugin Name: WT - Post of the Day
 
Plugin URI: https://nickgaultney.github.io/
 
Description: Take a category of posts and convert them into a cyclical 'post of the day'
 
Version: 0.1
 
Author: Nick Gaultney
 
Author URI: https://nickgaultney.github.io/
 
License: GPLv2 or later
 
Text Domain: PotD
 
*/

/*
 	BEGINNING OF GENERATED CODE
*/

/**
 * Generated by the WordPress Option Page generator
 * at http://jeremyhixon.com/wp-tools/option-page/
 */

class PostOfTheDay {
	private $post_of_the_day_options;

	public function __construct() {
		add_action( 'admin_menu', array( $this, 'post_of_the_day_add_plugin_page' ) );
		add_action( 'admin_init', array( $this, 'post_of_the_day_page_init' ) );
	}

	public function post_of_the_day_add_plugin_page() {
		add_menu_page(
			'Post of the Day', // page_title
			'Post of the Day', // menu_title
			'manage_options', // capability
			'post-of-the-day', // menu_slug
			array( $this, 'post_of_the_day_create_admin_page' ), // function
			'dashicons-email-alt', // icon_url
			99 // position
		);
	}

	public function post_of_the_day_create_admin_page() {
		$this->post_of_the_day_options = get_option( 'post_of_the_day_option_name' ); ?>

		<div class="wrap">
			<h2>Post of the Day</h2>
			<p>Post of the Day</p>
			<?php settings_errors(); ?>

			<form method="post" action="options.php">
				<?php
					settings_fields( 'post_of_the_day_option_group' );
					do_settings_sections( 'post-of-the-day-admin' );
					submit_button();
				?>
			</form>
		</div>
	<?php }

	public function post_of_the_day_page_init() {
		register_setting(
			'post_of_the_day_option_group', // option_group
			'post_of_the_day_option_name', // option_name
			array( $this, 'post_of_the_day_sanitize' ) // sanitize_callback
		);

		add_settings_section(
			'post_of_the_day_setting_section', // id
			'Settings', // title
			array( $this, 'post_of_the_day_section_info' ), // callback
			'post-of-the-day-admin' // page
		);

		add_settings_field(
			'potd_category_0', // id
			'PotD Category', // title
			array( $this, 'potd_category_0_callback' ), // callback
			'post-of-the-day-admin', // page
			'post_of_the_day_setting_section' // section
		);

		add_settings_field(
			'potd_time_central_standar_time_1', // id
			'PotD Time (Central Standar Time)', // title
			array( $this, 'potd_time_central_standar_time_1_callback' ), // callback
			'post-of-the-day-admin', // page
			'post_of_the_day_setting_section' // section
		);

		add_settings_field(
			'newsletter_potd_list_2', // id
			'Newsletter PotD List', // title
			array( $this, 'newsletter_potd_list_2_callback' ), // callback
			'post-of-the-day-admin', // page
			'post_of_the_day_setting_section' // section
		);
	}

	public function post_of_the_day_sanitize($input) {
		$sanitary_values = array();
		if ( isset( $input['potd_category_0'] ) ) {
			$sanitary_values['potd_category_0'] = sanitize_text_field( $input['potd_category_0'] );
		}

		if ( isset( $input['potd_time_central_standar_time_1'] ) ) {
			$sanitary_values['potd_time_central_standar_time_1'] = $input['potd_time_central_standar_time_1'];
		}

		if ( isset( $input['newsletter_potd_list_2'] ) ) {
			$sanitary_values['newsletter_potd_list_2'] = sanitize_text_field( $input['newsletter_potd_list_2'] );
		}

		return $sanitary_values;
	}

	public function post_of_the_day_section_info() {
		
	}

	public function potd_category_0_callback() {
		printf(
			'<input class="regular-text" type="text" name="post_of_the_day_option_name[potd_category_0]" id="potd_category_0" value="%s">',
			isset( $this->post_of_the_day_options['potd_category_0'] ) ? esc_attr( $this->post_of_the_day_options['potd_category_0']) : ''
		);
	}

	public function potd_time_central_standar_time_1_callback() {
		?> <select name="post_of_the_day_option_name[potd_time_central_standar_time_1]" id="potd_time_central_standar_time_1">
			<?php $selected = (isset( $this->post_of_the_day_options['potd_time_central_standar_time_1'] ) && $this->post_of_the_day_options['potd_time_central_standar_time_1'] === '0') ? 'selected' : '' ; ?>
			<option <?php echo $selected; ?>>0</option>
			<?php $selected = (isset( $this->post_of_the_day_options['potd_time_central_standar_time_1'] ) && $this->post_of_the_day_options['potd_time_central_standar_time_1'] === '1') ? 'selected' : '' ; ?>
			<option <?php echo $selected; ?>>1</option>
			<?php $selected = (isset( $this->post_of_the_day_options['potd_time_central_standar_time_1'] ) && $this->post_of_the_day_options['potd_time_central_standar_time_1'] === '2') ? 'selected' : '' ; ?>
			<option <?php echo $selected; ?>>2</option>
			<?php $selected = (isset( $this->post_of_the_day_options['potd_time_central_standar_time_1'] ) && $this->post_of_the_day_options['potd_time_central_standar_time_1'] === '3') ? 'selected' : '' ; ?>
			<option <?php echo $selected; ?>>3</option>
			<?php $selected = (isset( $this->post_of_the_day_options['potd_time_central_standar_time_1'] ) && $this->post_of_the_day_options['potd_time_central_standar_time_1'] === '4') ? 'selected' : '' ; ?>
			<option <?php echo $selected; ?>>4</option>
			<?php $selected = (isset( $this->post_of_the_day_options['potd_time_central_standar_time_1'] ) && $this->post_of_the_day_options['potd_time_central_standar_time_1'] === '5') ? 'selected' : '' ; ?>
			<option <?php echo $selected; ?>>5</option>
			<?php $selected = (isset( $this->post_of_the_day_options['potd_time_central_standar_time_1'] ) && $this->post_of_the_day_options['potd_time_central_standar_time_1'] === '6') ? 'selected' : '' ; ?>
			<option <?php echo $selected; ?>>6</option>
			<?php $selected = (isset( $this->post_of_the_day_options['potd_time_central_standar_time_1'] ) && $this->post_of_the_day_options['potd_time_central_standar_time_1'] === '7') ? 'selected' : '' ; ?>
			<option <?php echo $selected; ?>>7</option>
			<?php $selected = (isset( $this->post_of_the_day_options['potd_time_central_standar_time_1'] ) && $this->post_of_the_day_options['potd_time_central_standar_time_1'] === '8') ? 'selected' : '' ; ?>
			<option <?php echo $selected; ?>>8</option>
			<?php $selected = (isset( $this->post_of_the_day_options['potd_time_central_standar_time_1'] ) && $this->post_of_the_day_options['potd_time_central_standar_time_1'] === '9') ? 'selected' : '' ; ?>
			<option <?php echo $selected; ?>>9</option>
			<?php $selected = (isset( $this->post_of_the_day_options['potd_time_central_standar_time_1'] ) && $this->post_of_the_day_options['potd_time_central_standar_time_1'] === '10') ? 'selected' : '' ; ?>
			<option <?php echo $selected; ?>>10</option>
			<?php $selected = (isset( $this->post_of_the_day_options['potd_time_central_standar_time_1'] ) && $this->post_of_the_day_options['potd_time_central_standar_time_1'] === '11') ? 'selected' : '' ; ?>
			<option <?php echo $selected; ?>>11</option>
			<?php $selected = (isset( $this->post_of_the_day_options['potd_time_central_standar_time_1'] ) && $this->post_of_the_day_options['potd_time_central_standar_time_1'] === '12') ? 'selected' : '' ; ?>
			<option <?php echo $selected; ?>>12</option>
			<?php $selected = (isset( $this->post_of_the_day_options['potd_time_central_standar_time_1'] ) && $this->post_of_the_day_options['potd_time_central_standar_time_1'] === '13') ? 'selected' : '' ; ?>
			<option <?php echo $selected; ?>>13</option>
			<?php $selected = (isset( $this->post_of_the_day_options['potd_time_central_standar_time_1'] ) && $this->post_of_the_day_options['potd_time_central_standar_time_1'] === '14') ? 'selected' : '' ; ?>
			<option <?php echo $selected; ?>>14</option>
			<?php $selected = (isset( $this->post_of_the_day_options['potd_time_central_standar_time_1'] ) && $this->post_of_the_day_options['potd_time_central_standar_time_1'] === '15') ? 'selected' : '' ; ?>
			<option <?php echo $selected; ?>>15</option>
			<?php $selected = (isset( $this->post_of_the_day_options['potd_time_central_standar_time_1'] ) && $this->post_of_the_day_options['potd_time_central_standar_time_1'] === '16') ? 'selected' : '' ; ?>
			<option <?php echo $selected; ?>>16</option>
			<?php $selected = (isset( $this->post_of_the_day_options['potd_time_central_standar_time_1'] ) && $this->post_of_the_day_options['potd_time_central_standar_time_1'] === '17') ? 'selected' : '' ; ?>
			<option <?php echo $selected; ?>>17</option>
			<?php $selected = (isset( $this->post_of_the_day_options['potd_time_central_standar_time_1'] ) && $this->post_of_the_day_options['potd_time_central_standar_time_1'] === '18') ? 'selected' : '' ; ?>
			<option <?php echo $selected; ?>>18</option>
			<?php $selected = (isset( $this->post_of_the_day_options['potd_time_central_standar_time_1'] ) && $this->post_of_the_day_options['potd_time_central_standar_time_1'] === '19') ? 'selected' : '' ; ?>
			<option <?php echo $selected; ?>>19</option>
			<?php $selected = (isset( $this->post_of_the_day_options['potd_time_central_standar_time_1'] ) && $this->post_of_the_day_options['potd_time_central_standar_time_1'] === '20') ? 'selected' : '' ; ?>
			<option <?php echo $selected; ?>>20</option>
			<?php $selected = (isset( $this->post_of_the_day_options['potd_time_central_standar_time_1'] ) && $this->post_of_the_day_options['potd_time_central_standar_time_1'] === '21') ? 'selected' : '' ; ?>
			<option <?php echo $selected; ?>>21</option>
			<?php $selected = (isset( $this->post_of_the_day_options['potd_time_central_standar_time_1'] ) && $this->post_of_the_day_options['potd_time_central_standar_time_1'] === '22') ? 'selected' : '' ; ?>
			<option <?php echo $selected; ?>>22</option>
			<?php $selected = (isset( $this->post_of_the_day_options['potd_time_central_standar_time_1'] ) && $this->post_of_the_day_options['potd_time_central_standar_time_1'] === '23') ? 'selected' : '' ; ?>
			<option <?php echo $selected; ?>>23</option>
		</select> <?php
	}

	public function newsletter_potd_list_2_callback() {
		printf(
			'<input class="regular-text" type="text" name="post_of_the_day_option_name[newsletter_potd_list_2]" id="newsletter_potd_list_2" value="%s">',
			isset( $this->post_of_the_day_options['newsletter_potd_list_2'] ) ? esc_attr( $this->post_of_the_day_options['newsletter_potd_list_2']) : ''
		);
	}

}
if ( is_admin() )
	$post_of_the_day = new PostOfTheDay();

/* 
 * Retrieve this value with:
 * $post_of_the_day_options = get_option( 'post_of_the_day_option_name' ); // Array of All Options
 * $potd_category_0 = $post_of_the_day_options['potd_category_0']; // PotD Category
 * $potd_time_central_standar_time_1 = $post_of_the_day_options['potd_time_central_standar_time_1']; // PotD Time (Central Standar Time)
 * $newsletter_potd_list_2 = $post_of_the_day_options['newsletter_potd_list_2']; // Newsletter PotD List
 */

/*
 	END OF GENERATED CODE
*/

/*
	This function runs when the plugin is activated. It initializes the PotD plugin by creating a db table 
*/
function wt_potd_initialize() {
   // The options from the "Post of the Day" settings page (which are all currently empty)
   $potd_options = get_option( 'post_of_the_day_option_name' );

   $potd_options['potd_category_0'] = "1";
   $potd_options['potd_time_central_standar_time_1'] = "8";
   $potd_options['newsletter_potd_list_2'] = "1";

   // Add default values to options page. After an update occurs,
   // the database table is reset. Therefore this will also
   // generate the db table and initizlize it with the data
   // from the category.
   update_option( 'post_of_the_day_option_name', $potd_options); 

   // Schedule the next PotD
   wt_potd_schedule_post();
}

/*
	This function runs when the plugin is deactivated. Upon deactivation, it deletes any cached
	data (such as the potd title and content) and drops the table from the database. At the end 
	it removed the scheduled event if there is one. This therefore acts as a full reboot for the plugin. 
*/ 
function wt_potd_deactivate() {
	delete_transient('wt_potd_title');
	delete_transient('wt_potd_content');
	wp_clear_scheduled_hook( 'wt_potd' );
}

/*
	This function runs when the plugin is deactivated. Upon deactivation, it deletes any cached
	data (such as the potd title and content) and drops the table from the database. At the end 
	it removed the scheduled event if there is one. This therefore acts as a full reboot for the plugin. 
*/ 
function wt_potd_uninstallation() {
	delete_transient('wt_potd_title');
	delete_transient('wt_potd_content');

	global $wpdb;
	$wpdb->query("DROP TABLE IF EXISTS " . wt_table_name());

	wp_clear_scheduled_hook( 'wt_potd' );
	delete_option('post_of_the_day_option_name');
}

/*
	Run the "wt_potd" function every day at 12:00 p.m. Mountain Daylight Time (MDT)
*/
function wt_potd_schedule_post() {
	if (!wp_next_scheduled('wt_potd')) {
	    $time = strtotime('today'); 									//returns today midnight
	    $time = $time + wt_potd_get_time_offset_in_gmt(); 	// Keeping in mind this is in GMT.
	    wp_schedule_event($time, 'daily', 'wt_potd');
	}
}

/*
	
*/
function wt_potd() {
	// Gets the DB row of today's PotD
	$current_potd = wt_potd_get_active();
	// Gets the index of the next post in the cycle
	$next_potd_cycle_position = wt_potd_get_next_active_post($current_potd);

	// Deactivates today's PotD by setting the "isActive" column to 0
	wt_potd_deactivate_post();
	// Activates the new PotD by setting the "isActive" column to 1
	wt_potd_activate_post($next_potd_cycle_position);

	wt_configure_potd();
}

/*
	Retrieves the PotD title and content and saves them into transient cache. 

	FIXME: Seems like a redundant DB lookup since it was already found in "wt_potd"
			during the "wt_potd_activate_post"
*/
function wt_configure_potd() {
	global $wpdb;
	$table_name = wt_table_name();
	$retrieve_data = $wpdb->get_results( "SELECT * FROM $table_name WHERE isActive = 1" );

    $title = $retrieve_data[0]->title;
    $content = $retrieve_data[0]->content;

    set_transient('wt_potd_title', $title, 3600 * 24);
    set_transient('wt_potd_content', $content, 3600 * 24);

    wt_potd_email( "nmgaultney@gmail.com" );
	return [$title, $content];
}

/*
	Retrieves the title of today's PotD title and caches it if not already in cache
*/
function wt_potd_title() {
	$title = get_transient('wt_potd_title');

    if ($title === false) {
    	[$title, $content] = wt_configure_potd();
    }

    return $title;
}

/*
	Retrieves the title of today's PotD content and caches it if not already in cache
*/
function wt_potd_content() {
	$content = get_transient('wt_potd_content');

    if ($content === false) {
    	[$title, $content] = wt_configure_potd();
    }

    return $content;
}

/*
	Sends email to provided address with the PotD
*/
function wt_potd_email( $to ) {
	$wt_option = get_option('post_of_the_day_option_name');

	$subject = wt_potd_title();
	$message = wt_potd_content();
	$headers = array('Content-Type: text/html; charset=UTF-8');

	wp_mail( $to, $subject, $message, $headers );
}

/************************
 * 
 * 
 *	! Helper Functions !
 *
 * 
*************************/

/*
	This is the DB table name that is referenced throughout the entire plugin. 
	If you would like to change the table name everywhere, change it here.
*/
function wt_table_name() {
	global $wpdb;
	return $wpdb->prefix . "wt_potd";
}

/*
	Gets the DB row of today's PotD by finding the row where "isActive" is true
*/
function wt_potd_get_active() {
	global $wpdb;
	$table_name = wt_table_name();
	return $wpdb->get_results( "SELECT * FROM $table_name WHERE isActive = 1" )[0];
}

/*
	Gets the index of the next post in the cycle, ensuring that it loops back
	to the beginning of the list if the current post is the last post. 
*/
function wt_potd_get_next_active_post($potd) {
	global $wpdb;
	$table_name = wt_table_name();
	$table_size = $wpdb->get_var( "SELECT COUNT(*) FROM $table_name" );

	if ($table_size > $potd->cyclePosition) {
		return $potd->cyclePosition + 1;
	} else {
		return 1;
	}
}

/*
	Deactivates today's PotD by setting the "isActive" column to 0
*/
function wt_potd_deactivate_post() {
	global $wpdb;
	$table_name = wt_table_name();
	$wpdb->update( $table_name, array( 'isActive' => 0 ), array( 'isActive' => 1 ) );
}

/*
	Activates today's PotD by setting the "isActive" column to 1
*/
function wt_potd_activate_post($cyclePosition) {
	global $wpdb;
	$table_name = wt_table_name();
	$wpdb->update( $table_name, array( 'isActive' => 1 ), array( 'cyclePosition' => $cyclePosition ) );
}

/*
	This is used to stop the current scheduled event, and start
	a new one. Used primarily after the settings page is saved
	to update the time if changed.
*/
function wt_potd_reset_event() {
	wp_clear_scheduled_hook( 'wt_potd' );
	wt_potd_schedule_post();
}

/*
	This is used when the category is changed in the settings.
	In which case, drop the current DB data and refill it with 
	the data from the new category.
*/
function wt_potd_reset_posts() {
	wt_potd_delete_data();
	wt_potd_initialize_table();
}

/*
	Drop database table and delete cached information. Used in
	case of a reset (e.g. post category was changed)
*/
function wt_potd_delete_data() {
	delete_transient('wt_potd_title');
	delete_transient('wt_potd_content');

	global $wpdb;
	$wpdb->query("DROP TABLE IF EXISTS " . wt_table_name());
}

/*
	Used to generate the database table for this plugin
*/
function wt_potd_initialize_table() {
	// This is the wordpress database variable used to access the database directly using standard SQL commands
   global $wpdb;
   // The name of our PotD table in the DB
   $table_name = wt_table_name();
   $charset_collate = $wpdb->get_charset_collate();
   // The options from the "Post of the Day" settings page (which are all currently empty)
   $potd_options = get_option( 'post_of_the_day_option_name' );

   // The sql statement for generating our DB table
	$sql = "CREATE TABLE $table_name (
	  id mediumint(9) NOT NULL AUTO_INCREMENT,
	  title tinytext NOT NULL,
	  content text NOT NULL,
	  cyclePosition mediumint(9) NOT NULL,
	  isActive boolean NOT NULL,
	  PRIMARY KEY  (id)
	) $charset_collate;";

	// Can't remember what these two do
	require_once( ABSPATH . 'wp-admin/includes/upgrade.php' );
	dbDelta( $sql );

   // Get all posts from the database that are categorized as a "potd"
   $data = new WP_Query( array( 'cat' => wt_potd_get_category_option() ) );  

   // Loop through all of the posts in the "potd" category and 
   // add them to our custom table for ease of use
   $count = 1; 
   if ( $data->have_posts() ) {
   	while ( $data->have_posts() ) {
   		$data->the_post();

   		$wpdb->insert( 
			$table_name, 
			array( 
				'title' => get_the_title(), 
				'content' => get_the_content(), 
				'cyclePosition' => $count,
				'isActive' => false,
			) 
		);

		$count += 1;
   	}
   }

  // Set the first PotD as the current PotD
  $wpdb->update( $table_name, array( 'isActive' => 1 ), array( 'cyclePosition' => 1 ) );
}

/************************
 * 
 * 
 *	! Option Getters !
 *
 * 
*************************/

function wt_potd_option_exist() {
	$post_of_the_day_options = get_option( 'post_of_the_day_option_name' );
}

function wt_potd_get_category_option() {
	$potd_options = get_option( 'post_of_the_day_option_name' );
	if ( $potd_options === false || empty($potd_options['potd_category_0']) ) {
		return 1;
	}

	return $potd_options['potd_category_0'];

}

function wt_potd_get_time_option() {
	$potd_options = get_option( 'post_of_the_day_option_name' );
	if ( $potd_options === false || empty($potd_options['potd_time_central_standar_time_1']) ) {
		return false;
	}

	return $potd_options['potd_time_central_standar_time_1'];
}

function wt_potd_get_list_option() {
	$potd_options = get_option( 'post_of_the_day_option_name' );
	if ( $potd_options === false || empty($potd_options['newsletter_potd_list_2']) ) {
		return false;
	}

	return $potd_options['newsletter_potd_list_2'];
}

/*
	This takes the time from the options page and converts it
	from MST to GMT since WP is relative to GMT. 
*/
function wt_potd_get_time_offset_in_gmt() {
	$potd_options = get_option( 'post_of_the_day_option_name' );
		
	// If there is no time set in the options page 
	if ($potd_options === false) {
		$potd_time_offset = 50400; // This is 14:00 GMT and 8:00 MST
	} else {
		$potd_time_cst = intval($potd_options['potd_time_central_standar_time_1']);
		
		// Since GMT is 6 hours ahead of MST, we need to wrap around to the next
		// day after 6:00 p.m. (19:00) CST to match proper time in GMT and not input an invalid time
		if ($potd_time_cst >= 18) {
			$potd_time_cst = $potd_time_cst - 19;
		}

		$potd_time_gmt = $potd_time_cst + 6;
		$potd_time_offset = $potd_time_gmt * 60 * 60;
	}

	return $potd_time_offset;
}

/*****************************
 * 
 * 
 *	! Register Declarations !
 *
 * 
******************************/
register_activation_hook( __FILE__, 'wt_potd_initialize' );
register_deactivation_hook( __FILE__, 'wt_potd_deactivate' );
register_uninstall_hook(__FILE__, 'wt_potd_uninstallation');

add_shortcode( 'wt-potd-title', 'wt_potd_title' );
add_shortcode( 'wt-potd-content', 'wt_potd_content' );

add_action('wt_potd', 'wt_potd');
add_action('updated_option', function( $option_name, $old_value, $value ) {
   	if ($option_name === 'post_of_the_day_option_name') {
   		if ($old_value['potd_category_0'] !== $value['potd_category_0']) {
   			wt_potd_reset_posts();
   		}

   		wt_potd_reset_event();
   	}
}, 10, 3);

add_action('added_option', function( $option_name, $value ) {
   	if ($option_name === 'post_of_the_day_option_name') {
   		if ($old_value['potd_category_0'] !== $value['potd_category_0']) {
   			wt_potd_reset_posts();
   		}

   		wt_potd_reset_event();
   	}
}, 10, 2);
?>